/* This file was automatically generated by CasADi 3.6.4.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) objective_function_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_clear CASADI_PREFIX(clear)
#define casadi_copy CASADI_PREFIX(copy)
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_f1 CASADI_PREFIX(f1)
#define casadi_fill CASADI_PREFIX(fill)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_s2 CASADI_PREFIX(s2)
#define casadi_trans CASADI_PREFIX(trans)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

void casadi_fill(casadi_real* x, casadi_int n, casadi_real alpha) {
  casadi_int i;
  if (x) {
    for (i=0; i<n; ++i) *x++ = alpha;
  }
}

void casadi_copy(const casadi_real* x, casadi_int n, casadi_real* y) {
  casadi_int i;
  if (y) {
    if (x) {
      for (i=0; i<n; ++i) *y++ = *x++;
    } else {
      for (i=0; i<n; ++i) *y++ = 0.;
    }
  }
}

void casadi_clear(casadi_real* x, casadi_int n) {
  casadi_int i;
  if (x) {
    for (i=0; i<n; ++i) *x++ = 0;
  }
}

void casadi_trans(const casadi_real* x, const casadi_int* sp_x, casadi_real* y,
    const casadi_int* sp_y, casadi_int* tmp) {
  casadi_int ncol_x, nnz_x, ncol_y, k;
  const casadi_int* row_x, *colind_y;
  ncol_x = sp_x[1];
  nnz_x = sp_x[2 + ncol_x];
  row_x = sp_x + 2 + ncol_x+1;
  ncol_y = sp_y[1];
  colind_y = sp_y+2;
  for (k=0; k<ncol_y; ++k) tmp[k] = colind_y[k];
  for (k=0; k<nnz_x; ++k) {
    y[tmp[row_x[k]]++] = x[k];
  }
}

static const casadi_int casadi_s0[118] = {114, 1, 0, 114, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113};
static const casadi_int casadi_s1[46] = {42, 1, 0, 42, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41};
static const casadi_int casadi_s2[231] = {114, 114, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113};

/* f_function:(i0[114],i1[42])->(o0[114]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_int i;
  casadi_real *rr, *ss;
  const casadi_real *cs;
  casadi_real *w0=w+0, *w1=w+114, *w2=w+148, *w3=w+168, *w4=w+174, *w5=w+186, *w6=w+228, *w7=w+342, *w8=w+376, *w9=w+418, *w10=w+422, *w11=w+425, *w12=w+431, *w13=w+437, *w14=w+443, *w15=w+449, *w16=w+455, *w17=w+461, *w18=w+467, *w19=w+470, *w20=w+476, *w21=w+482, *w22=w+488, *w23=w+494, *w24=w+500, *w25=w+506, *w26=w+512;
  /* #0: @0 = all_0.0001(114x1) */
  casadi_fill(w0, 114, 1.0000000000000000e-04);
  /* #1: @1 = input[0][0] */
  casadi_copy(arg[0], 34, w1);
  /* #2: @2 = input[0][1] */
  casadi_copy(arg[0] ? arg[0]+34 : 0, 20, w2);
  /* #3: @3 = input[0][2] */
  casadi_copy(arg[0] ? arg[0]+54 : 0, 6, w3);
  /* #4: @4 = input[0][3] */
  casadi_copy(arg[0] ? arg[0]+60 : 0, 12, w4);
  /* #5: @5 = input[0][4] */
  casadi_copy(arg[0] ? arg[0]+72 : 0, 42, w5);
  /* #6: @6 = vertcat(@1, @2, @3, @4, @5) */
  rr=w6;
  for (i=0, cs=w1; i<34; ++i) *rr++ = *cs++;
  for (i=0, cs=w2; i<20; ++i) *rr++ = *cs++;
  for (i=0, cs=w3; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w4; i<12; ++i) *rr++ = *cs++;
  for (i=0, cs=w5; i<42; ++i) *rr++ = *cs++;
  /* #7: @6 = (2.*@6) */
  for (i=0, rr=w6, cs=w6; i<114; ++i) *rr++ = (2.* *cs++ );
  /* #8: @0 = (@0*@6) */
  for (i=0, rr=w0, cs=w6; i<114; ++i) (*rr++) *= (*cs++);
  /* #9: {@7, @2, @3, @4, @8} = vertsplit(@0) */
  casadi_copy(w0, 34, w7);
  casadi_copy(w0+34, 20, w2);
  casadi_copy(w0+54, 6, w3);
  casadi_copy(w0+60, 12, w4);
  casadi_copy(w0+72, 42, w8);
  /* #10: @9 = @1[30:34] */
  for (rr=w9, ss=w1+30; ss!=w1+34; ss+=1) *rr++ = *ss;
  /* #11: @9 = (2.*@9) */
  for (i=0, rr=w9, cs=w9; i<4; ++i) *rr++ = (2.* *cs++ );
  /* #12: (@7[30:34] += @9) */
  for (rr=w7+30, ss=w9; rr!=w7+34; rr+=1) *rr += *ss++;
  /* #13: @9 = @1[16:20] */
  for (rr=w9, ss=w1+16; ss!=w1+20; ss+=1) *rr++ = *ss;
  /* #14: @9 = (2.*@9) */
  for (i=0, rr=w9, cs=w9; i<4; ++i) *rr++ = (2.* *cs++ );
  /* #15: (@7[16:20] += @9) */
  for (rr=w7+16, ss=w9; rr!=w7+20; rr+=1) *rr += *ss++;
  /* #16: output[0][0] = @7 */
  casadi_copy(w7, 34, res[0]);
  /* #17: output[0][1] = @2 */
  if (res[0]) casadi_copy(w2, 20, res[0]+34);
  /* #18: output[0][2] = @3 */
  if (res[0]) casadi_copy(w3, 6, res[0]+54);
  /* #19: output[0][3] = @4 */
  if (res[0]) casadi_copy(w4, 12, res[0]+60);
  /* #20: @3 = zeros(6x1) */
  casadi_clear(w3, 6);
  /* #21: @10 = all_10(3x1) */
  casadi_fill(w10, 3, 10.);
  /* #22: {@11, @12, @13, @14, @15, @16, @17} = vertsplit(@5) */
  casadi_copy(w5, 6, w11);
  casadi_copy(w5+6, 6, w12);
  casadi_copy(w5+12, 6, w13);
  casadi_copy(w5+18, 6, w14);
  casadi_copy(w5+24, 6, w15);
  casadi_copy(w5+30, 6, w16);
  casadi_copy(w5+36, 6, w17);
  /* #23: @18 = @11[3:6] */
  for (rr=w18, ss=w11+3; ss!=w11+6; ss+=1) *rr++ = *ss;
  /* #24: @5 = input[1][0] */
  casadi_copy(arg[1], 42, w5);
  /* #25: {@19, @20, @21, @22, @23, @24, @25} = vertsplit(@5) */
  casadi_copy(w5, 6, w19);
  casadi_copy(w5+6, 6, w20);
  casadi_copy(w5+12, 6, w21);
  casadi_copy(w5+18, 6, w22);
  casadi_copy(w5+24, 6, w23);
  casadi_copy(w5+30, 6, w24);
  casadi_copy(w5+36, 6, w25);
  /* #26: @26 = @19[3:6] */
  for (rr=w26, ss=w19+3; ss!=w19+6; ss+=1) *rr++ = *ss;
  /* #27: @18 = (@18-@26) */
  for (i=0, rr=w18, cs=w26; i<3; ++i) (*rr++) -= (*cs++);
  /* #28: @18 = (2.*@18) */
  for (i=0, rr=w18, cs=w18; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #29: @10 = (@10*@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) *= (*cs++);
  /* #30: (@3[3:6] += @10) */
  for (rr=w3+3, ss=w10; rr!=w3+6; rr+=1) *rr += *ss++;
  /* #31: @10 = all_10(3x1) */
  casadi_fill(w10, 3, 10.);
  /* #32: @18 = @11[:3] */
  for (rr=w18, ss=w11+0; ss!=w11+3; ss+=1) *rr++ = *ss;
  /* #33: @26 = @19[:3] */
  for (rr=w26, ss=w19+0; ss!=w19+3; ss+=1) *rr++ = *ss;
  /* #34: @18 = (@18-@26) */
  for (i=0, rr=w18, cs=w26; i<3; ++i) (*rr++) -= (*cs++);
  /* #35: @18 = (2.*@18) */
  for (i=0, rr=w18, cs=w18; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #36: @10 = (@10*@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) *= (*cs++);
  /* #37: (@3[:3] += @10) */
  for (rr=w3+0, ss=w10; rr!=w3+3; rr+=1) *rr += *ss++;
  /* #38: @19 = zeros(6x1) */
  casadi_clear(w19, 6);
  /* #39: @10 = all_100(3x1) */
  casadi_fill(w10, 3, 100.);
  /* #40: @18 = @12[3:6] */
  for (rr=w18, ss=w12+3; ss!=w12+6; ss+=1) *rr++ = *ss;
  /* #41: @26 = @20[3:6] */
  for (rr=w26, ss=w20+3; ss!=w20+6; ss+=1) *rr++ = *ss;
  /* #42: @18 = (@18-@26) */
  for (i=0, rr=w18, cs=w26; i<3; ++i) (*rr++) -= (*cs++);
  /* #43: @18 = (2.*@18) */
  for (i=0, rr=w18, cs=w18; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #44: @10 = (@10*@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) *= (*cs++);
  /* #45: (@19[3:6] += @10) */
  for (rr=w19+3, ss=w10; rr!=w19+6; rr+=1) *rr += *ss++;
  /* #46: @10 = all_100(3x1) */
  casadi_fill(w10, 3, 100.);
  /* #47: @18 = @12[:3] */
  for (rr=w18, ss=w12+0; ss!=w12+3; ss+=1) *rr++ = *ss;
  /* #48: @26 = @20[:3] */
  for (rr=w26, ss=w20+0; ss!=w20+3; ss+=1) *rr++ = *ss;
  /* #49: @18 = (@18-@26) */
  for (i=0, rr=w18, cs=w26; i<3; ++i) (*rr++) -= (*cs++);
  /* #50: @18 = (2.*@18) */
  for (i=0, rr=w18, cs=w18; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #51: @10 = (@10*@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) *= (*cs++);
  /* #52: (@19[:3] += @10) */
  for (rr=w19+0, ss=w10; rr!=w19+3; rr+=1) *rr += *ss++;
  /* #53: @20 = zeros(6x1) */
  casadi_clear(w20, 6);
  /* #54: @10 = all_100(3x1) */
  casadi_fill(w10, 3, 100.);
  /* #55: @18 = @13[3:6] */
  for (rr=w18, ss=w13+3; ss!=w13+6; ss+=1) *rr++ = *ss;
  /* #56: @26 = @21[3:6] */
  for (rr=w26, ss=w21+3; ss!=w21+6; ss+=1) *rr++ = *ss;
  /* #57: @18 = (@18-@26) */
  for (i=0, rr=w18, cs=w26; i<3; ++i) (*rr++) -= (*cs++);
  /* #58: @18 = (2.*@18) */
  for (i=0, rr=w18, cs=w18; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #59: @10 = (@10*@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) *= (*cs++);
  /* #60: (@20[3:6] += @10) */
  for (rr=w20+3, ss=w10; rr!=w20+6; rr+=1) *rr += *ss++;
  /* #61: @10 = all_100(3x1) */
  casadi_fill(w10, 3, 100.);
  /* #62: @18 = @13[:3] */
  for (rr=w18, ss=w13+0; ss!=w13+3; ss+=1) *rr++ = *ss;
  /* #63: @26 = @21[:3] */
  for (rr=w26, ss=w21+0; ss!=w21+3; ss+=1) *rr++ = *ss;
  /* #64: @18 = (@18-@26) */
  for (i=0, rr=w18, cs=w26; i<3; ++i) (*rr++) -= (*cs++);
  /* #65: @18 = (2.*@18) */
  for (i=0, rr=w18, cs=w18; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #66: @10 = (@10*@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) *= (*cs++);
  /* #67: (@20[:3] += @10) */
  for (rr=w20+0, ss=w10; rr!=w20+3; rr+=1) *rr += *ss++;
  /* #68: @21 = zeros(6x1) */
  casadi_clear(w21, 6);
  /* #69: @10 = @14[3:6] */
  for (rr=w10, ss=w14+3; ss!=w14+6; ss+=1) *rr++ = *ss;
  /* #70: @18 = @22[3:6] */
  for (rr=w18, ss=w22+3; ss!=w22+6; ss+=1) *rr++ = *ss;
  /* #71: @10 = (@10-@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) -= (*cs++);
  /* #72: @10 = (2.*@10) */
  for (i=0, rr=w10, cs=w10; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #73: (@21[3:6] += @10) */
  for (rr=w21+3, ss=w10; rr!=w21+6; rr+=1) *rr += *ss++;
  /* #74: @10 = @14[:3] */
  for (rr=w10, ss=w14+0; ss!=w14+3; ss+=1) *rr++ = *ss;
  /* #75: @18 = @22[:3] */
  for (rr=w18, ss=w22+0; ss!=w22+3; ss+=1) *rr++ = *ss;
  /* #76: @10 = (@10-@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) -= (*cs++);
  /* #77: @10 = (2.*@10) */
  for (i=0, rr=w10, cs=w10; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #78: (@21[:3] += @10) */
  for (rr=w21+0, ss=w10; rr!=w21+3; rr+=1) *rr += *ss++;
  /* #79: @22 = zeros(6x1) */
  casadi_clear(w22, 6);
  /* #80: @10 = @15[3:6] */
  for (rr=w10, ss=w15+3; ss!=w15+6; ss+=1) *rr++ = *ss;
  /* #81: @18 = @23[3:6] */
  for (rr=w18, ss=w23+3; ss!=w23+6; ss+=1) *rr++ = *ss;
  /* #82: @10 = (@10-@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) -= (*cs++);
  /* #83: @10 = (2.*@10) */
  for (i=0, rr=w10, cs=w10; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #84: (@22[3:6] += @10) */
  for (rr=w22+3, ss=w10; rr!=w22+6; rr+=1) *rr += *ss++;
  /* #85: @10 = @15[:3] */
  for (rr=w10, ss=w15+0; ss!=w15+3; ss+=1) *rr++ = *ss;
  /* #86: @18 = @23[:3] */
  for (rr=w18, ss=w23+0; ss!=w23+3; ss+=1) *rr++ = *ss;
  /* #87: @10 = (@10-@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) -= (*cs++);
  /* #88: @10 = (2.*@10) */
  for (i=0, rr=w10, cs=w10; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #89: (@22[:3] += @10) */
  for (rr=w22+0, ss=w10; rr!=w22+3; rr+=1) *rr += *ss++;
  /* #90: @23 = zeros(6x1) */
  casadi_clear(w23, 6);
  /* #91: @10 = @16[3:6] */
  for (rr=w10, ss=w16+3; ss!=w16+6; ss+=1) *rr++ = *ss;
  /* #92: @18 = @24[3:6] */
  for (rr=w18, ss=w24+3; ss!=w24+6; ss+=1) *rr++ = *ss;
  /* #93: @10 = (@10-@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) -= (*cs++);
  /* #94: @10 = (2.*@10) */
  for (i=0, rr=w10, cs=w10; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #95: (@23[3:6] += @10) */
  for (rr=w23+3, ss=w10; rr!=w23+6; rr+=1) *rr += *ss++;
  /* #96: @10 = @16[:3] */
  for (rr=w10, ss=w16+0; ss!=w16+3; ss+=1) *rr++ = *ss;
  /* #97: @18 = @24[:3] */
  for (rr=w18, ss=w24+0; ss!=w24+3; ss+=1) *rr++ = *ss;
  /* #98: @10 = (@10-@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) -= (*cs++);
  /* #99: @10 = (2.*@10) */
  for (i=0, rr=w10, cs=w10; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #100: (@23[:3] += @10) */
  for (rr=w23+0, ss=w10; rr!=w23+3; rr+=1) *rr += *ss++;
  /* #101: @24 = zeros(6x1) */
  casadi_clear(w24, 6);
  /* #102: @10 = @17[3:6] */
  for (rr=w10, ss=w17+3; ss!=w17+6; ss+=1) *rr++ = *ss;
  /* #103: @18 = @25[3:6] */
  for (rr=w18, ss=w25+3; ss!=w25+6; ss+=1) *rr++ = *ss;
  /* #104: @10 = (@10-@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) -= (*cs++);
  /* #105: @10 = (2.*@10) */
  for (i=0, rr=w10, cs=w10; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #106: (@24[3:6] += @10) */
  for (rr=w24+3, ss=w10; rr!=w24+6; rr+=1) *rr += *ss++;
  /* #107: @10 = @17[:3] */
  for (rr=w10, ss=w17+0; ss!=w17+3; ss+=1) *rr++ = *ss;
  /* #108: @18 = @25[:3] */
  for (rr=w18, ss=w25+0; ss!=w25+3; ss+=1) *rr++ = *ss;
  /* #109: @10 = (@10-@18) */
  for (i=0, rr=w10, cs=w18; i<3; ++i) (*rr++) -= (*cs++);
  /* #110: @10 = (2.*@10) */
  for (i=0, rr=w10, cs=w10; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #111: (@24[:3] += @10) */
  for (rr=w24+0, ss=w10; rr!=w24+3; rr+=1) *rr += *ss++;
  /* #112: @5 = vertcat(@3, @19, @20, @21, @22, @23, @24) */
  rr=w5;
  for (i=0, cs=w3; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w19; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w20; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w21; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w22; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w23; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w24; i<6; ++i) *rr++ = *cs++;
  /* #113: @8 = (@8+@5) */
  for (i=0, rr=w8, cs=w5; i<42; ++i) (*rr++) += (*cs++);
  /* #114: output[0][4] = @8 */
  if (res[0]) casadi_copy(w8, 42, res[0]+72);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int f_function(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int f_function_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int f_function_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void f_function_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int f_function_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void f_function_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void f_function_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void f_function_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int f_function_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int f_function_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real f_function_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* f_function_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* f_function_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* f_function_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* f_function_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int f_function_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 9;
  if (sz_res) *sz_res = 8;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 515;
  return 0;
}

/* H_function:(i0[114],i1[42])->(o0[114x114,114nz]) */
static int casadi_f1(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_int i;
  casadi_real *rr, *ss;
  const casadi_real *cs;
  casadi_real *w0=w+0, *w1=w+114, *w2=w+228, *w3=w+262, *w4=w+282, *w5=w+288, *w6=w+300, *w7=w+342, *w8=w+376, *w9=w+418, *w10=w+422, *w11=w+428, *w12=w+431, *w13=w+437, *w14=w+443, *w15=w+449, *w16=w+455, *w17=w+461, *w18=w+467, *w19=w+473;
  /* #0: @0 = zeros(114x114,114nz) */
  casadi_clear(w0, 114);
  /* #1: @1 = all_0.0002(114x1) */
  casadi_fill(w1, 114, 2.0000000000000001e-04);
  /* #2: {@2, @3, @4, @5, @6} = vertsplit(@1) */
  casadi_copy(w1, 34, w2);
  casadi_copy(w1+34, 20, w3);
  casadi_copy(w1+54, 6, w4);
  casadi_copy(w1+60, 12, w5);
  casadi_copy(w1+72, 42, w6);
  /* #3: @1 = ones(114x1) */
  casadi_fill(w1, 114, 1.);
  /* #4: {@7, NULL, NULL, NULL, @8} = vertsplit(@1) */
  casadi_copy(w1, 34, w7);
  casadi_copy(w1+72, 42, w8);
  /* #5: @9 = @7[30:34] */
  for (rr=w9, ss=w7+30; ss!=w7+34; ss+=1) *rr++ = *ss;
  /* #6: @9 = (2.*@9) */
  for (i=0, rr=w9, cs=w9; i<4; ++i) *rr++ = (2.* *cs++ );
  /* #7: (@2[30:34] += @9) */
  for (rr=w2+30, ss=w9; rr!=w2+34; rr+=1) *rr += *ss++;
  /* #8: @9 = @7[16:20] */
  for (rr=w9, ss=w7+16; ss!=w7+20; ss+=1) *rr++ = *ss;
  /* #9: @9 = (2.*@9) */
  for (i=0, rr=w9, cs=w9; i<4; ++i) *rr++ = (2.* *cs++ );
  /* #10: (@2[16:20] += @9) */
  for (rr=w2+16, ss=w9; rr!=w2+20; rr+=1) *rr += *ss++;
  /* #11: @10 = zeros(6x1) */
  casadi_clear(w10, 6);
  /* #12: @11 = all_10(3x1) */
  casadi_fill(w11, 3, 10.);
  /* #13: {@12, @13, @14, @15, @16, @17, @18} = vertsplit(@8) */
  casadi_copy(w8, 6, w12);
  casadi_copy(w8+6, 6, w13);
  casadi_copy(w8+12, 6, w14);
  casadi_copy(w8+18, 6, w15);
  casadi_copy(w8+24, 6, w16);
  casadi_copy(w8+30, 6, w17);
  casadi_copy(w8+36, 6, w18);
  /* #14: @19 = @12[3:6] */
  for (rr=w19, ss=w12+3; ss!=w12+6; ss+=1) *rr++ = *ss;
  /* #15: @19 = (2.*@19) */
  for (i=0, rr=w19, cs=w19; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #16: @11 = (@11*@19) */
  for (i=0, rr=w11, cs=w19; i<3; ++i) (*rr++) *= (*cs++);
  /* #17: (@10[3:6] += @11) */
  for (rr=w10+3, ss=w11; rr!=w10+6; rr+=1) *rr += *ss++;
  /* #18: @11 = all_10(3x1) */
  casadi_fill(w11, 3, 10.);
  /* #19: @19 = @12[:3] */
  for (rr=w19, ss=w12+0; ss!=w12+3; ss+=1) *rr++ = *ss;
  /* #20: @19 = (2.*@19) */
  for (i=0, rr=w19, cs=w19; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #21: @11 = (@11*@19) */
  for (i=0, rr=w11, cs=w19; i<3; ++i) (*rr++) *= (*cs++);
  /* #22: (@10[:3] += @11) */
  for (rr=w10+0, ss=w11; rr!=w10+3; rr+=1) *rr += *ss++;
  /* #23: @12 = zeros(6x1) */
  casadi_clear(w12, 6);
  /* #24: @11 = all_100(3x1) */
  casadi_fill(w11, 3, 100.);
  /* #25: @19 = @13[3:6] */
  for (rr=w19, ss=w13+3; ss!=w13+6; ss+=1) *rr++ = *ss;
  /* #26: @19 = (2.*@19) */
  for (i=0, rr=w19, cs=w19; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #27: @11 = (@11*@19) */
  for (i=0, rr=w11, cs=w19; i<3; ++i) (*rr++) *= (*cs++);
  /* #28: (@12[3:6] += @11) */
  for (rr=w12+3, ss=w11; rr!=w12+6; rr+=1) *rr += *ss++;
  /* #29: @11 = all_100(3x1) */
  casadi_fill(w11, 3, 100.);
  /* #30: @19 = @13[:3] */
  for (rr=w19, ss=w13+0; ss!=w13+3; ss+=1) *rr++ = *ss;
  /* #31: @19 = (2.*@19) */
  for (i=0, rr=w19, cs=w19; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #32: @11 = (@11*@19) */
  for (i=0, rr=w11, cs=w19; i<3; ++i) (*rr++) *= (*cs++);
  /* #33: (@12[:3] += @11) */
  for (rr=w12+0, ss=w11; rr!=w12+3; rr+=1) *rr += *ss++;
  /* #34: @13 = zeros(6x1) */
  casadi_clear(w13, 6);
  /* #35: @11 = all_100(3x1) */
  casadi_fill(w11, 3, 100.);
  /* #36: @19 = @14[3:6] */
  for (rr=w19, ss=w14+3; ss!=w14+6; ss+=1) *rr++ = *ss;
  /* #37: @19 = (2.*@19) */
  for (i=0, rr=w19, cs=w19; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #38: @11 = (@11*@19) */
  for (i=0, rr=w11, cs=w19; i<3; ++i) (*rr++) *= (*cs++);
  /* #39: (@13[3:6] += @11) */
  for (rr=w13+3, ss=w11; rr!=w13+6; rr+=1) *rr += *ss++;
  /* #40: @11 = all_100(3x1) */
  casadi_fill(w11, 3, 100.);
  /* #41: @19 = @14[:3] */
  for (rr=w19, ss=w14+0; ss!=w14+3; ss+=1) *rr++ = *ss;
  /* #42: @19 = (2.*@19) */
  for (i=0, rr=w19, cs=w19; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #43: @11 = (@11*@19) */
  for (i=0, rr=w11, cs=w19; i<3; ++i) (*rr++) *= (*cs++);
  /* #44: (@13[:3] += @11) */
  for (rr=w13+0, ss=w11; rr!=w13+3; rr+=1) *rr += *ss++;
  /* #45: @14 = zeros(6x1) */
  casadi_clear(w14, 6);
  /* #46: @11 = @15[3:6] */
  for (rr=w11, ss=w15+3; ss!=w15+6; ss+=1) *rr++ = *ss;
  /* #47: @11 = (2.*@11) */
  for (i=0, rr=w11, cs=w11; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #48: (@14[3:6] += @11) */
  for (rr=w14+3, ss=w11; rr!=w14+6; rr+=1) *rr += *ss++;
  /* #49: @11 = @15[:3] */
  for (rr=w11, ss=w15+0; ss!=w15+3; ss+=1) *rr++ = *ss;
  /* #50: @11 = (2.*@11) */
  for (i=0, rr=w11, cs=w11; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #51: (@14[:3] += @11) */
  for (rr=w14+0, ss=w11; rr!=w14+3; rr+=1) *rr += *ss++;
  /* #52: @15 = zeros(6x1) */
  casadi_clear(w15, 6);
  /* #53: @11 = @16[3:6] */
  for (rr=w11, ss=w16+3; ss!=w16+6; ss+=1) *rr++ = *ss;
  /* #54: @11 = (2.*@11) */
  for (i=0, rr=w11, cs=w11; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #55: (@15[3:6] += @11) */
  for (rr=w15+3, ss=w11; rr!=w15+6; rr+=1) *rr += *ss++;
  /* #56: @11 = @16[:3] */
  for (rr=w11, ss=w16+0; ss!=w16+3; ss+=1) *rr++ = *ss;
  /* #57: @11 = (2.*@11) */
  for (i=0, rr=w11, cs=w11; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #58: (@15[:3] += @11) */
  for (rr=w15+0, ss=w11; rr!=w15+3; rr+=1) *rr += *ss++;
  /* #59: @16 = zeros(6x1) */
  casadi_clear(w16, 6);
  /* #60: @11 = @17[3:6] */
  for (rr=w11, ss=w17+3; ss!=w17+6; ss+=1) *rr++ = *ss;
  /* #61: @11 = (2.*@11) */
  for (i=0, rr=w11, cs=w11; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #62: (@16[3:6] += @11) */
  for (rr=w16+3, ss=w11; rr!=w16+6; rr+=1) *rr += *ss++;
  /* #63: @11 = @17[:3] */
  for (rr=w11, ss=w17+0; ss!=w17+3; ss+=1) *rr++ = *ss;
  /* #64: @11 = (2.*@11) */
  for (i=0, rr=w11, cs=w11; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #65: (@16[:3] += @11) */
  for (rr=w16+0, ss=w11; rr!=w16+3; rr+=1) *rr += *ss++;
  /* #66: @17 = zeros(6x1) */
  casadi_clear(w17, 6);
  /* #67: @11 = @18[3:6] */
  for (rr=w11, ss=w18+3; ss!=w18+6; ss+=1) *rr++ = *ss;
  /* #68: @11 = (2.*@11) */
  for (i=0, rr=w11, cs=w11; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #69: (@17[3:6] += @11) */
  for (rr=w17+3, ss=w11; rr!=w17+6; rr+=1) *rr += *ss++;
  /* #70: @11 = @18[:3] */
  for (rr=w11, ss=w18+0; ss!=w18+3; ss+=1) *rr++ = *ss;
  /* #71: @11 = (2.*@11) */
  for (i=0, rr=w11, cs=w11; i<3; ++i) *rr++ = (2.* *cs++ );
  /* #72: (@17[:3] += @11) */
  for (rr=w17+0, ss=w11; rr!=w17+3; rr+=1) *rr += *ss++;
  /* #73: @8 = vertcat(@10, @12, @13, @14, @15, @16, @17) */
  rr=w8;
  for (i=0, cs=w10; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w12; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w13; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w14; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w15; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w16; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w17; i<6; ++i) *rr++ = *cs++;
  /* #74: @6 = (@6+@8) */
  for (i=0, rr=w6, cs=w8; i<42; ++i) (*rr++) += (*cs++);
  /* #75: @1 = vertcat(@2, @3, @4, @5, @6) */
  rr=w1;
  for (i=0, cs=w2; i<34; ++i) *rr++ = *cs++;
  for (i=0, cs=w3; i<20; ++i) *rr++ = *cs++;
  for (i=0, cs=w4; i<6; ++i) *rr++ = *cs++;
  for (i=0, cs=w5; i<12; ++i) *rr++ = *cs++;
  for (i=0, cs=w6; i<42; ++i) *rr++ = *cs++;
  /* #76: (@0[:114] = @1) */
  for (rr=w0+0, ss=w1; rr!=w0+114; rr+=1) *rr = *ss++;
  /* #77: (@0[:114] = @1) */
  for (rr=w0+0, ss=w1; rr!=w0+114; rr+=1) *rr = *ss++;
  /* #78: @1 = @0' */
  casadi_trans(w0,casadi_s2, w1, casadi_s2, iw);
  /* #79: output[0][0] = @1 */
  casadi_copy(w1, 114, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int H_function(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f1(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int H_function_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int H_function_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void H_function_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int H_function_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void H_function_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void H_function_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void H_function_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int H_function_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int H_function_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real H_function_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* H_function_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* H_function_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* H_function_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* H_function_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s2;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int H_function_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 9;
  if (sz_res) *sz_res = 8;
  if (sz_iw) *sz_iw = 115;
  if (sz_w) *sz_w = 476;
  return 0;
}



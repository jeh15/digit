/* This file was automatically generated by CasADi 3.6.4.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) inequality_constraint_function_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_clear CASADI_PREFIX(clear)
#define casadi_copy CASADI_PREFIX(copy)
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_f1 CASADI_PREFIX(f1)
#define casadi_fill CASADI_PREFIX(fill)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_s2 CASADI_PREFIX(s2)
#define casadi_s3 CASADI_PREFIX(s3)
#define casadi_s4 CASADI_PREFIX(s4)
#define casadi_s5 CASADI_PREFIX(s5)
#define casadi_s6 CASADI_PREFIX(s6)
#define casadi_trans CASADI_PREFIX(trans)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

void casadi_copy(const casadi_real* x, casadi_int n, casadi_real* y) {
  casadi_int i;
  if (y) {
    if (x) {
      for (i=0; i<n; ++i) *y++ = *x++;
    } else {
      for (i=0; i<n; ++i) *y++ = 0.;
    }
  }
}

void casadi_clear(casadi_real* x, casadi_int n) {
  casadi_int i;
  if (x) {
    for (i=0; i<n; ++i) *x++ = 0;
  }
}

void casadi_fill(casadi_real* x, casadi_int n, casadi_real alpha) {
  casadi_int i;
  if (x) {
    for (i=0; i<n; ++i) *x++ = alpha;
  }
}

void casadi_trans(const casadi_real* x, const casadi_int* sp_x, casadi_real* y,
    const casadi_int* sp_y, casadi_int* tmp) {
  casadi_int ncol_x, nnz_x, ncol_y, k;
  const casadi_int* row_x, *colind_y;
  ncol_x = sp_x[1];
  nnz_x = sp_x[2 + ncol_x];
  row_x = sp_x + 2 + ncol_x+1;
  ncol_y = sp_y[1];
  colind_y = sp_y+2;
  for (k=0; k<ncol_y; ++k) tmp[k] = colind_y[k];
  for (k=0; k<nnz_x; ++k) {
    y[tmp[row_x[k]]++] = x[k];
  }
}

static const casadi_int casadi_s0[118] = {114, 1, 0, 114, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113};
static const casadi_int casadi_s1[6] = {2, 1, 0, 2, 0, 1};
static const casadi_int casadi_s2[20] = {16, 1, 0, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
static const casadi_int casadi_s3[16] = {0, 3, 6, 9, 12, 15, 18, 21, 24, 26, 28, 30, 32, 33, 34, 35};
static const casadi_int casadi_s4[12] = {2, 5, 8, 11, 14, 17, 20, 23, 25, 27, 29, 31};
static const casadi_int casadi_s5[153] = {16, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 8, 12, 18, 19, 20, 22, 26, 30, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 12, 13, 8, 9, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 8, 9, 14, 15, 10, 11, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 10, 11};
static const casadi_int casadi_s6[55] = {114, 16, 0, 3, 6, 9, 12, 15, 18, 21, 24, 26, 28, 30, 32, 33, 34, 35, 36, 63, 64, 65, 63, 64, 65, 63, 64, 65, 63, 64, 65, 69, 70, 71, 69, 70, 71, 69, 70, 71, 69, 70, 71, 62, 65, 62, 65, 68, 71, 68, 71, 60, 61, 66, 67};

/* b_ineq_function:(i0[114],i1[2])->(o0[16]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_int i;
  casadi_real *rr, *ss;
  const casadi_real *cs;
  casadi_real *w0=w+0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, *w15=w+26, w16, w17, w18, *w19=w+31;
  /* #0: @0 = input[0][3] */
  casadi_copy(arg[0] ? arg[0]+60 : 0, 12, w0);
  /* #1: @1 = @0[3] */
  for (rr=(&w1), ss=w0+3; ss!=w0+4; ss+=1) *rr++ = *ss;
  /* #2: @2 = @0[4] */
  for (rr=(&w2), ss=w0+4; ss!=w0+5; ss+=1) *rr++ = *ss;
  /* #3: @1 = (@1+@2) */
  w1 += w2;
  /* #4: @2 = 0.6 */
  w2 = 5.9999999999999998e-01;
  /* #5: @3 = @0[5] */
  for (rr=(&w3), ss=w0+5; ss!=w0+6; ss+=1) *rr++ = *ss;
  /* #6: @2 = (@2*@3) */
  w2 *= w3;
  /* #7: @1 = (@1-@2) */
  w1 -= w2;
  /* #8: @2 = @0[4] */
  for (rr=(&w2), ss=w0+4; ss!=w0+5; ss+=1) *rr++ = *ss;
  /* #9: @3 = @0[3] */
  for (rr=(&w3), ss=w0+3; ss!=w0+4; ss+=1) *rr++ = *ss;
  /* #10: @2 = (@2-@3) */
  w2 -= w3;
  /* #11: @3 = 0.6 */
  w3 = 5.9999999999999998e-01;
  /* #12: @4 = @0[5] */
  for (rr=(&w4), ss=w0+5; ss!=w0+6; ss+=1) *rr++ = *ss;
  /* #13: @3 = (@3*@4) */
  w3 *= w4;
  /* #14: @2 = (@2-@3) */
  w2 -= w3;
  /* #15: @3 = @0[3] */
  for (rr=(&w3), ss=w0+3; ss!=w0+4; ss+=1) *rr++ = *ss;
  /* #16: @4 = @0[4] */
  for (rr=(&w4), ss=w0+4; ss!=w0+5; ss+=1) *rr++ = *ss;
  /* #17: @3 = (@3-@4) */
  w3 -= w4;
  /* #18: @4 = 0.6 */
  w4 = 5.9999999999999998e-01;
  /* #19: @5 = @0[5] */
  for (rr=(&w5), ss=w0+5; ss!=w0+6; ss+=1) *rr++ = *ss;
  /* #20: @4 = (@4*@5) */
  w4 *= w5;
  /* #21: @3 = (@3-@4) */
  w3 -= w4;
  /* #22: @4 = @0[3] */
  for (rr=(&w4), ss=w0+3; ss!=w0+4; ss+=1) *rr++ = *ss;
  /* #23: @4 = (-@4) */
  w4 = (- w4 );
  /* #24: @5 = @0[4] */
  for (rr=(&w5), ss=w0+4; ss!=w0+5; ss+=1) *rr++ = *ss;
  /* #25: @4 = (@4-@5) */
  w4 -= w5;
  /* #26: @5 = 0.6 */
  w5 = 5.9999999999999998e-01;
  /* #27: @6 = @0[5] */
  for (rr=(&w6), ss=w0+5; ss!=w0+6; ss+=1) *rr++ = *ss;
  /* #28: @5 = (@5*@6) */
  w5 *= w6;
  /* #29: @4 = (@4-@5) */
  w4 -= w5;
  /* #30: @5 = @0[9] */
  for (rr=(&w5), ss=w0+9; ss!=w0+10; ss+=1) *rr++ = *ss;
  /* #31: @6 = @0[10] */
  for (rr=(&w6), ss=w0+10; ss!=w0+11; ss+=1) *rr++ = *ss;
  /* #32: @5 = (@5+@6) */
  w5 += w6;
  /* #33: @6 = 0.6 */
  w6 = 5.9999999999999998e-01;
  /* #34: @7 = @0[11] */
  for (rr=(&w7), ss=w0+11; ss!=w0+12; ss+=1) *rr++ = *ss;
  /* #35: @6 = (@6*@7) */
  w6 *= w7;
  /* #36: @5 = (@5-@6) */
  w5 -= w6;
  /* #37: @6 = @0[10] */
  for (rr=(&w6), ss=w0+10; ss!=w0+11; ss+=1) *rr++ = *ss;
  /* #38: @7 = @0[9] */
  for (rr=(&w7), ss=w0+9; ss!=w0+10; ss+=1) *rr++ = *ss;
  /* #39: @6 = (@6-@7) */
  w6 -= w7;
  /* #40: @7 = 0.6 */
  w7 = 5.9999999999999998e-01;
  /* #41: @8 = @0[11] */
  for (rr=(&w8), ss=w0+11; ss!=w0+12; ss+=1) *rr++ = *ss;
  /* #42: @7 = (@7*@8) */
  w7 *= w8;
  /* #43: @6 = (@6-@7) */
  w6 -= w7;
  /* #44: @7 = @0[9] */
  for (rr=(&w7), ss=w0+9; ss!=w0+10; ss+=1) *rr++ = *ss;
  /* #45: @8 = @0[10] */
  for (rr=(&w8), ss=w0+10; ss!=w0+11; ss+=1) *rr++ = *ss;
  /* #46: @7 = (@7-@8) */
  w7 -= w8;
  /* #47: @8 = 0.6 */
  w8 = 5.9999999999999998e-01;
  /* #48: @9 = @0[11] */
  for (rr=(&w9), ss=w0+11; ss!=w0+12; ss+=1) *rr++ = *ss;
  /* #49: @8 = (@8*@9) */
  w8 *= w9;
  /* #50: @7 = (@7-@8) */
  w7 -= w8;
  /* #51: @8 = @0[9] */
  for (rr=(&w8), ss=w0+9; ss!=w0+10; ss+=1) *rr++ = *ss;
  /* #52: @8 = (-@8) */
  w8 = (- w8 );
  /* #53: @9 = @0[10] */
  for (rr=(&w9), ss=w0+10; ss!=w0+11; ss+=1) *rr++ = *ss;
  /* #54: @8 = (@8-@9) */
  w8 -= w9;
  /* #55: @9 = 0.6 */
  w9 = 5.9999999999999998e-01;
  /* #56: @10 = @0[11] */
  for (rr=(&w10), ss=w0+11; ss!=w0+12; ss+=1) *rr++ = *ss;
  /* #57: @9 = (@9*@10) */
  w9 *= w10;
  /* #58: @8 = (@8-@9) */
  w8 -= w9;
  /* #59: @9 = @0[2] */
  for (rr=(&w9), ss=w0+2; ss!=w0+3; ss+=1) *rr++ = *ss;
  /* #60: @10 = 0.015 */
  w10 = 1.4999999999999999e-02;
  /* #61: @11 = @0[5] */
  for (rr=(&w11), ss=w0+5; ss!=w0+6; ss+=1) *rr++ = *ss;
  /* #62: @10 = (@10*@11) */
  w10 *= w11;
  /* #63: @9 = (@9-@10) */
  w9 -= w10;
  /* #64: @10 = @0[2] */
  for (rr=(&w10), ss=w0+2; ss!=w0+3; ss+=1) *rr++ = *ss;
  /* #65: @10 = (-@10) */
  w10 = (- w10 );
  /* #66: @11 = 0.015 */
  w11 = 1.4999999999999999e-02;
  /* #67: @12 = @0[5] */
  for (rr=(&w12), ss=w0+5; ss!=w0+6; ss+=1) *rr++ = *ss;
  /* #68: @11 = (@11*@12) */
  w11 *= w12;
  /* #69: @10 = (@10-@11) */
  w10 -= w11;
  /* #70: @11 = @0[8] */
  for (rr=(&w11), ss=w0+8; ss!=w0+9; ss+=1) *rr++ = *ss;
  /* #71: @12 = 0.015 */
  w12 = 1.4999999999999999e-02;
  /* #72: @13 = @0[11] */
  for (rr=(&w13), ss=w0+11; ss!=w0+12; ss+=1) *rr++ = *ss;
  /* #73: @12 = (@12*@13) */
  w12 *= w13;
  /* #74: @11 = (@11-@12) */
  w11 -= w12;
  /* #75: @12 = @0[8] */
  for (rr=(&w12), ss=w0+8; ss!=w0+9; ss+=1) *rr++ = *ss;
  /* #76: @12 = (-@12) */
  w12 = (- w12 );
  /* #77: @13 = 0.015 */
  w13 = 1.4999999999999999e-02;
  /* #78: @14 = @0[11] */
  for (rr=(&w14), ss=w0+11; ss!=w0+12; ss+=1) *rr++ = *ss;
  /* #79: @13 = (@13*@14) */
  w13 *= w14;
  /* #80: @12 = (@12-@13) */
  w12 -= w13;
  /* #81: @13 = @0[0] */
  for (rr=(&w13), ss=w0+0; ss!=w0+1; ss+=1) *rr++ = *ss;
  /* #82: @15 = input[1][0] */
  casadi_copy(arg[1], 2, w15);
  /* #83: @14 = @15[0] */
  for (rr=(&w14), ss=w15+0; ss!=w15+1; ss+=1) *rr++ = *ss;
  /* #84: @13 = (@13/@14) */
  w13 /= w14;
  /* #85: @14 = 0.025 */
  w14 = 2.5000000000000001e-02;
  /* #86: @13 = (@13-@14) */
  w13 -= w14;
  /* #87: @14 = @0[1] */
  for (rr=(&w14), ss=w0+1; ss!=w0+2; ss+=1) *rr++ = *ss;
  /* #88: @16 = @15[0] */
  for (rr=(&w16), ss=w15+0; ss!=w15+1; ss+=1) *rr++ = *ss;
  /* #89: @14 = (@14/@16) */
  w14 /= w16;
  /* #90: @16 = 0.0125 */
  w16 = 1.2500000000000001e-02;
  /* #91: @14 = (@14-@16) */
  w14 -= w16;
  /* #92: @16 = @0[6] */
  for (rr=(&w16), ss=w0+6; ss!=w0+7; ss+=1) *rr++ = *ss;
  /* #93: @17 = @15[1] */
  for (rr=(&w17), ss=w15+1; ss!=w15+2; ss+=1) *rr++ = *ss;
  /* #94: @16 = (@16/@17) */
  w16 /= w17;
  /* #95: @17 = 0.025 */
  w17 = 2.5000000000000001e-02;
  /* #96: @16 = (@16-@17) */
  w16 -= w17;
  /* #97: @17 = @0[7] */
  for (rr=(&w17), ss=w0+7; ss!=w0+8; ss+=1) *rr++ = *ss;
  /* #98: @18 = @15[1] */
  for (rr=(&w18), ss=w15+1; ss!=w15+2; ss+=1) *rr++ = *ss;
  /* #99: @17 = (@17/@18) */
  w17 /= w18;
  /* #100: @18 = 0.0125 */
  w18 = 1.2500000000000001e-02;
  /* #101: @17 = (@17-@18) */
  w17 -= w18;
  /* #102: @19 = vertcat(@1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @16, @17) */
  rr=w19;
  *rr++ = w1;
  *rr++ = w2;
  *rr++ = w3;
  *rr++ = w4;
  *rr++ = w5;
  *rr++ = w6;
  *rr++ = w7;
  *rr++ = w8;
  *rr++ = w9;
  *rr++ = w10;
  *rr++ = w11;
  *rr++ = w12;
  *rr++ = w13;
  *rr++ = w14;
  *rr++ = w16;
  *rr++ = w17;
  /* #103: @19 = (-@19) */
  for (i=0, rr=w19, cs=w19; i<16; ++i) *rr++ = (- *cs++ );
  /* #104: output[0][0] = @19 */
  casadi_copy(w19, 16, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int b_ineq_function(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int b_ineq_function_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int b_ineq_function_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void b_ineq_function_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int b_ineq_function_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void b_ineq_function_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void b_ineq_function_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void b_ineq_function_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int b_ineq_function_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int b_ineq_function_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real b_ineq_function_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* b_ineq_function_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* b_ineq_function_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* b_ineq_function_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* b_ineq_function_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s2;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int b_ineq_function_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 18;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 47;
  return 0;
}

/* A_ineq_function:(i0[114],i1[2])->(o0[16x114,36nz]) */
static int casadi_f1(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real *rr, *ss;
  const casadi_int *cii;
  casadi_real *w0=w+0, *w1=w+36, *w2=w+146, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, *w16=w+167, w17, w18, w19, w20, *w21=w+173, *w22=w+189, *w31=w+191, *w32=w+199, *w33=w+211, *w34=w+223;
  /* #0: @0 = zeros(114x16,36nz) */
  casadi_clear(w0, 36);
  /* #1: @1 = ones(114x1,110nz) */
  casadi_fill(w1, 110, 1.);
  /* #2: {NULL, NULL, NULL, @2, NULL} = vertsplit(@1) */
  casadi_copy(w1+60, 8, w2);
  /* #3: @3 = @2[3] */
  for (rr=(&w3), ss=w2+3; ss!=w2+4; ss+=1) *rr++ = *ss;
  /* #4: @4 = @2[3] */
  for (rr=(&w4), ss=w2+3; ss!=w2+4; ss+=1) *rr++ = *ss;
  /* #5: @4 = (-@4) */
  w4 = (- w4 );
  /* #6: @5 = @2[3] */
  for (rr=(&w5), ss=w2+3; ss!=w2+4; ss+=1) *rr++ = *ss;
  /* #7: @6 = @2[3] */
  for (rr=(&w6), ss=w2+3; ss!=w2+4; ss+=1) *rr++ = *ss;
  /* #8: @6 = (-@6) */
  w6 = (- w6 );
  /* #9: @7 = @2[7] */
  for (rr=(&w7), ss=w2+7; ss!=w2+8; ss+=1) *rr++ = *ss;
  /* #10: @8 = @2[7] */
  for (rr=(&w8), ss=w2+7; ss!=w2+8; ss+=1) *rr++ = *ss;
  /* #11: @8 = (-@8) */
  w8 = (- w8 );
  /* #12: @9 = @2[7] */
  for (rr=(&w9), ss=w2+7; ss!=w2+8; ss+=1) *rr++ = *ss;
  /* #13: @10 = @2[7] */
  for (rr=(&w10), ss=w2+7; ss!=w2+8; ss+=1) *rr++ = *ss;
  /* #14: @10 = (-@10) */
  w10 = (- w10 );
  /* #15: @11 = @2[2] */
  for (rr=(&w11), ss=w2+2; ss!=w2+3; ss+=1) *rr++ = *ss;
  /* #16: @12 = @2[2] */
  for (rr=(&w12), ss=w2+2; ss!=w2+3; ss+=1) *rr++ = *ss;
  /* #17: @12 = (-@12) */
  w12 = (- w12 );
  /* #18: @13 = @2[6] */
  for (rr=(&w13), ss=w2+6; ss!=w2+7; ss+=1) *rr++ = *ss;
  /* #19: @14 = @2[6] */
  for (rr=(&w14), ss=w2+6; ss!=w2+7; ss+=1) *rr++ = *ss;
  /* #20: @14 = (-@14) */
  w14 = (- w14 );
  /* #21: @15 = @2[0] */
  for (rr=(&w15), ss=w2+0; ss!=w2+1; ss+=1) *rr++ = *ss;
  /* #22: @16 = input[1][0] */
  casadi_copy(arg[1], 2, w16);
  /* #23: @17 = @16[0] */
  for (rr=(&w17), ss=w16+0; ss!=w16+1; ss+=1) *rr++ = *ss;
  /* #24: @15 = (@15/@17) */
  w15 /= w17;
  /* #25: @17 = @2[1] */
  for (rr=(&w17), ss=w2+1; ss!=w2+2; ss+=1) *rr++ = *ss;
  /* #26: @18 = @16[0] */
  for (rr=(&w18), ss=w16+0; ss!=w16+1; ss+=1) *rr++ = *ss;
  /* #27: @17 = (@17/@18) */
  w17 /= w18;
  /* #28: @18 = @2[4] */
  for (rr=(&w18), ss=w2+4; ss!=w2+5; ss+=1) *rr++ = *ss;
  /* #29: @19 = @16[1] */
  for (rr=(&w19), ss=w16+1; ss!=w16+2; ss+=1) *rr++ = *ss;
  /* #30: @18 = (@18/@19) */
  w18 /= w19;
  /* #31: @19 = @2[5] */
  for (rr=(&w19), ss=w2+5; ss!=w2+6; ss+=1) *rr++ = *ss;
  /* #32: @20 = @16[1] */
  for (rr=(&w20), ss=w16+1; ss!=w16+2; ss+=1) *rr++ = *ss;
  /* #33: @19 = (@19/@20) */
  w19 /= w20;
  /* #34: @21 = vertcat(@3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @17, @18, @19) */
  rr=w21;
  *rr++ = w3;
  *rr++ = w4;
  *rr++ = w5;
  *rr++ = w6;
  *rr++ = w7;
  *rr++ = w8;
  *rr++ = w9;
  *rr++ = w10;
  *rr++ = w11;
  *rr++ = w12;
  *rr++ = w13;
  *rr++ = w14;
  *rr++ = w15;
  *rr++ = w17;
  *rr++ = w18;
  *rr++ = w19;
  /* #35: (@0[0, 3, 6, 9, 12, 15, 18, 21, 24, 26, 28, 30, 32, 33, 34, 35] = @21) */
  for (cii=casadi_s3, rr=w0, ss=w21; cii!=casadi_s3+16; ++cii, ++ss) rr[*cii] = *ss;
  /* #36: @16 = ones(114x1,2nz) */
  casadi_fill(w16, 2, 1.);
  /* #37: {NULL, NULL, NULL, @22, NULL} = vertsplit(@16) */
  casadi_copy(w16, 2, w22);
  /* #38: @3 = @22[0] */
  for (rr=(&w3), ss=w22+0; ss!=w22+1; ss+=1) *rr++ = *ss;
  /* #39: @4 = @22[0] */
  for (rr=(&w4), ss=w22+0; ss!=w22+1; ss+=1) *rr++ = *ss;
  /* #40: @5 = @22[0] */
  for (rr=(&w5), ss=w22+0; ss!=w22+1; ss+=1) *rr++ = *ss;
  /* #41: @5 = (-@5) */
  w5 = (- w5 );
  /* #42: @6 = @22[0] */
  for (rr=(&w6), ss=w22+0; ss!=w22+1; ss+=1) *rr++ = *ss;
  /* #43: @6 = (-@6) */
  w6 = (- w6 );
  /* #44: @7 = @22[1] */
  for (rr=(&w7), ss=w22+1; ss!=w22+2; ss+=1) *rr++ = *ss;
  /* #45: @8 = @22[1] */
  for (rr=(&w8), ss=w22+1; ss!=w22+2; ss+=1) *rr++ = *ss;
  /* #46: @9 = @22[1] */
  for (rr=(&w9), ss=w22+1; ss!=w22+2; ss+=1) *rr++ = *ss;
  /* #47: @9 = (-@9) */
  w9 = (- w9 );
  /* #48: @10 = @22[1] */
  for (rr=(&w10), ss=w22+1; ss!=w22+2; ss+=1) *rr++ = *ss;
  /* #49: @10 = (-@10) */
  w10 = (- w10 );
  /* #50: @23 = 00 */
  /* #51: @24 = 00 */
  /* #52: @25 = 00 */
  /* #53: @26 = 00 */
  /* #54: @27 = 00 */
  /* #55: @28 = 00 */
  /* #56: @29 = 00 */
  /* #57: @30 = 00 */
  /* #58: @2 = vertcat(@3, @4, @5, @6, @7, @8, @9, @10, @23, @24, @25, @26, @27, @28, @29, @30) */
  rr=w2;
  *rr++ = w3;
  *rr++ = w4;
  *rr++ = w5;
  *rr++ = w6;
  *rr++ = w7;
  *rr++ = w8;
  *rr++ = w9;
  *rr++ = w10;
  /* #59: @31 = @2[:8] */
  for (rr=w31, ss=w2+0; ss!=w2+8; ss+=1) *rr++ = *ss;
  /* #60: (@0[1:25:3] = @31) */
  for (rr=w0+1, ss=w31; rr!=w0+25; rr+=3) *rr = *ss++;
  /* #61: @3 = 0.6 */
  w3 = 5.9999999999999998e-01;
  /* #62: @22 = ones(114x1,2nz) */
  casadi_fill(w22, 2, 1.);
  /* #63: {NULL, NULL, NULL, @16, NULL} = vertsplit(@22) */
  casadi_copy(w22, 2, w16);
  /* #64: @4 = @16[0] */
  for (rr=(&w4), ss=w16+0; ss!=w16+1; ss+=1) *rr++ = *ss;
  /* #65: @3 = (@3*@4) */
  w3 *= w4;
  /* #66: @3 = (-@3) */
  w3 = (- w3 );
  /* #67: @4 = 0.6 */
  w4 = 5.9999999999999998e-01;
  /* #68: @5 = @16[0] */
  for (rr=(&w5), ss=w16+0; ss!=w16+1; ss+=1) *rr++ = *ss;
  /* #69: @4 = (@4*@5) */
  w4 *= w5;
  /* #70: @4 = (-@4) */
  w4 = (- w4 );
  /* #71: @5 = 0.6 */
  w5 = 5.9999999999999998e-01;
  /* #72: @6 = @16[0] */
  for (rr=(&w6), ss=w16+0; ss!=w16+1; ss+=1) *rr++ = *ss;
  /* #73: @5 = (@5*@6) */
  w5 *= w6;
  /* #74: @5 = (-@5) */
  w5 = (- w5 );
  /* #75: @6 = 0.6 */
  w6 = 5.9999999999999998e-01;
  /* #76: @7 = @16[0] */
  for (rr=(&w7), ss=w16+0; ss!=w16+1; ss+=1) *rr++ = *ss;
  /* #77: @6 = (@6*@7) */
  w6 *= w7;
  /* #78: @6 = (-@6) */
  w6 = (- w6 );
  /* #79: @7 = 0.6 */
  w7 = 5.9999999999999998e-01;
  /* #80: @8 = @16[1] */
  for (rr=(&w8), ss=w16+1; ss!=w16+2; ss+=1) *rr++ = *ss;
  /* #81: @7 = (@7*@8) */
  w7 *= w8;
  /* #82: @7 = (-@7) */
  w7 = (- w7 );
  /* #83: @8 = 0.6 */
  w8 = 5.9999999999999998e-01;
  /* #84: @9 = @16[1] */
  for (rr=(&w9), ss=w16+1; ss!=w16+2; ss+=1) *rr++ = *ss;
  /* #85: @8 = (@8*@9) */
  w8 *= w9;
  /* #86: @8 = (-@8) */
  w8 = (- w8 );
  /* #87: @9 = 0.6 */
  w9 = 5.9999999999999998e-01;
  /* #88: @10 = @16[1] */
  for (rr=(&w10), ss=w16+1; ss!=w16+2; ss+=1) *rr++ = *ss;
  /* #89: @9 = (@9*@10) */
  w9 *= w10;
  /* #90: @9 = (-@9) */
  w9 = (- w9 );
  /* #91: @10 = 0.6 */
  w10 = 5.9999999999999998e-01;
  /* #92: @11 = @16[1] */
  for (rr=(&w11), ss=w16+1; ss!=w16+2; ss+=1) *rr++ = *ss;
  /* #93: @10 = (@10*@11) */
  w10 *= w11;
  /* #94: @10 = (-@10) */
  w10 = (- w10 );
  /* #95: @11 = 0.015 */
  w11 = 1.4999999999999999e-02;
  /* #96: @12 = @16[0] */
  for (rr=(&w12), ss=w16+0; ss!=w16+1; ss+=1) *rr++ = *ss;
  /* #97: @11 = (@11*@12) */
  w11 *= w12;
  /* #98: @11 = (-@11) */
  w11 = (- w11 );
  /* #99: @12 = 0.015 */
  w12 = 1.4999999999999999e-02;
  /* #100: @13 = @16[0] */
  for (rr=(&w13), ss=w16+0; ss!=w16+1; ss+=1) *rr++ = *ss;
  /* #101: @12 = (@12*@13) */
  w12 *= w13;
  /* #102: @12 = (-@12) */
  w12 = (- w12 );
  /* #103: @13 = 0.015 */
  w13 = 1.4999999999999999e-02;
  /* #104: @14 = @16[1] */
  for (rr=(&w14), ss=w16+1; ss!=w16+2; ss+=1) *rr++ = *ss;
  /* #105: @13 = (@13*@14) */
  w13 *= w14;
  /* #106: @13 = (-@13) */
  w13 = (- w13 );
  /* #107: @14 = 0.015 */
  w14 = 1.4999999999999999e-02;
  /* #108: @15 = @16[1] */
  for (rr=(&w15), ss=w16+1; ss!=w16+2; ss+=1) *rr++ = *ss;
  /* #109: @14 = (@14*@15) */
  w14 *= w15;
  /* #110: @14 = (-@14) */
  w14 = (- w14 );
  /* #111: @23 = 00 */
  /* #112: @24 = 00 */
  /* #113: @25 = 00 */
  /* #114: @26 = 00 */
  /* #115: @32 = vertcat(@3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @23, @24, @25, @26) */
  rr=w32;
  *rr++ = w3;
  *rr++ = w4;
  *rr++ = w5;
  *rr++ = w6;
  *rr++ = w7;
  *rr++ = w8;
  *rr++ = w9;
  *rr++ = w10;
  *rr++ = w11;
  *rr++ = w12;
  *rr++ = w13;
  *rr++ = w14;
  /* #116: @33 = @32[:12] */
  for (rr=w33, ss=w32+0; ss!=w32+12; ss+=1) *rr++ = *ss;
  /* #117: (@0[2, 5, 8, 11, 14, 17, 20, 23, 25, 27, 29, 31] = @33) */
  for (cii=casadi_s4, rr=w0, ss=w33; cii!=casadi_s4+12; ++cii, ++ss) rr[*cii] = *ss;
  /* #118: @34 = @0' */
  casadi_trans(w0,casadi_s6, w34, casadi_s5, iw);
  /* #119: output[0][0] = @34 */
  casadi_copy(w34, 36, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int A_ineq_function(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f1(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int A_ineq_function_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int A_ineq_function_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void A_ineq_function_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int A_ineq_function_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void A_ineq_function_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void A_ineq_function_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void A_ineq_function_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int A_ineq_function_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int A_ineq_function_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real A_ineq_function_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* A_ineq_function_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* A_ineq_function_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* A_ineq_function_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* A_ineq_function_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s5;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int A_ineq_function_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 18;
  if (sz_res) *sz_res = 6;
  if (sz_iw) *sz_iw = 115;
  if (sz_w) *sz_w = 259;
  return 0;
}


